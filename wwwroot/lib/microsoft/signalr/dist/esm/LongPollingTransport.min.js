/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@microsoft/signalr@7.0.11/dist/esm/LongPollingTransport.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{AbortController}from"./AbortController";import{HttpError,TimeoutError}from"./Errors";import{LogLevel}from"./ILogger";import{TransferFormat}from"./ITransport";import{Arg,getDataDetail,getUserAgentHeader,sendMessage}from"./Utils";export class LongPollingTransport{constructor(t,o,e){this._httpClient=t,this._logger=o,this._pollAbort=new AbortController,this._options=e,this._running=!1,this.onreceive=null,this.onclose=null}get pollAborted(){return this._pollAbort.aborted}async connect(t,o){if(Arg.isRequired(t,"url"),Arg.isRequired(o,"transferFormat"),Arg.isIn(o,TransferFormat,"transferFormat"),this._url=t,this._logger.log(LogLevel.Trace,"(LongPolling transport) Connecting."),o===TransferFormat.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[e,r]=getUserAgentHeader(),n={[e]:r,...this._options.headers},s={abortSignal:this._pollAbort.signal,headers:n,timeout:1e5,withCredentials:this._options.withCredentials};o===TransferFormat.Binary&&(s.responseType="arraybuffer");const i=`${t}&_=${Date.now()}`;this._logger.log(LogLevel.Trace,`(LongPolling transport) polling: ${i}.`);const l=await this._httpClient.get(i,s);200!==l.statusCode?(this._logger.log(LogLevel.Error,`(LongPolling transport) Unexpected response code: ${l.statusCode}.`),this._closeError=new HttpError(l.statusText||"",l.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,s)}async _poll(t,o){try{for(;this._running;)try{const e=`${t}&_=${Date.now()}`;this._logger.log(LogLevel.Trace,`(LongPolling transport) polling: ${e}.`);const r=await this._httpClient.get(e,o);204===r.statusCode?(this._logger.log(LogLevel.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):200!==r.statusCode?(this._logger.log(LogLevel.Error,`(LongPolling transport) Unexpected response code: ${r.statusCode}.`),this._closeError=new HttpError(r.statusText||"",r.statusCode),this._running=!1):r.content?(this._logger.log(LogLevel.Trace,`(LongPolling transport) data received. ${getDataDetail(r.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(r.content)):this._logger.log(LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(t){this._running?t instanceof TimeoutError?this._logger.log(LogLevel.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=t,this._running=!1):this._logger.log(LogLevel.Trace,`(LongPolling transport) Poll errored after shutdown: ${t.message}`)}}finally{this._logger.log(LogLevel.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(t){return this._running?sendMessage(this._logger,"LongPolling",this._httpClient,this._url,t,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(LogLevel.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(LogLevel.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const t={},[o,e]=getUserAgentHeader();t[o]=e;const r={headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials};await this._httpClient.delete(this._url,r),this._logger.log(LogLevel.Trace,"(LongPolling transport) DELETE request sent.")}finally{this._logger.log(LogLevel.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let t="(LongPolling transport) Firing onclose event.";this._closeError&&(t+=" Error: "+this._closeError),this._logger.log(LogLevel.Trace,t),this.onclose(this._closeError)}}}
//# sourceMappingURL=/sm/9d6c79136bf1ad65ce4206798d3fcc8dbfa1190d9df413535f356d6c41885845.map